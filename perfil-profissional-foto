// ======================================================================
//              Módulo: perfil-profissional-foto
//      Responsabilidade: Gerenciar a exibição, seleção, upload e
//                      deleção da foto de perfil do profissional.
// ======================================================================

import { doc, getDoc, updateDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import { ref, uploadBytes, getDownloadURL, deleteObject } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";
import { db, storage } from './firebase-config.js'; // Verifique se o caminho para sua configuração do Firebase está correto.

/**
 * MULTIEMPRESA: Obtém o empresaId da empresa ativa do localStorage.
 */
function getEmpresaIdAtiva() {
    return localStorage.getItem("empresaAtivaId") || null;
}

/**
 * Renderiza o componente de foto do profissional na tela e configura os eventos.
 * @param {string} fotoUrl - URL atual da foto do profissional (pode ser nula).
 * @param {(file: File) => Promise<string|null>} onTrocarFoto - Callback para fazer o upload de uma nova foto.
 * @param {() => Promise<boolean>} onDeletarFoto - Callback para deletar a foto existente.
 */
export function renderizarFotoProfissional(fotoUrl, onTrocarFoto, onDeletarFoto) {
    const fotoContainer = document.getElementById('perfil-profissional-foto-container');
    if (!fotoContainer) {
        console.error("Elemento 'perfil-profissional-foto-container' não encontrado no DOM.");
        return;
    }

    // Adiciona o botão de remover apenas se já existir uma foto
    const botaoDeletarHtml = fotoUrl ?
        `<button type="button" id="btn-deletar-foto-profissional" class="botao-perigo">Remover foto</button>` :
        '';

    // Template HTML para o componente de foto
    fotoContainer.innerHTML = `
        <img id="perfil-profissional-foto" 
             src="${fotoUrl || 'https://placehold.co/80x80/6366f1/white?text=Foto'}" 
             alt="Foto do profissional"
             style="width: 80px; height: 80px; border-radius: 50%; margin-bottom: 10px; object-fit: cover; border: 2px solid #e5e7eb;">
        <br>
        <input type="file" id="input-foto-profissional" accept="image/*" style="display:none;">
        <div style="display: flex; gap: 10px;">
            <button type="button" id="btn-trocar-foto-profissional" class="botao-secundario">Trocar foto</button>
            ${botaoDeletarHtml}
        </div>
        <span id="status-foto-profissional" style="display: block; margin-top: 8px; color: #6b7280; font-size: 0.875em;"></span>
    `;

    const btnTrocar = document.getElementById('btn-trocar-foto-profissional');
    const inputFoto = document.getElementById('input-foto-profissional');
    const statusSpan = document.getElementById('status-foto-profissional');
    const imgPreview = document.getElementById('perfil-profissional-foto');
    const btnDeletar = document.getElementById('btn-deletar-foto-profissional');

    // Abre o seletor de arquivos ao clicar no botão "Trocar foto"
    btnTrocar.onclick = () => inputFoto.click();

    // Lida com a seleção de um novo arquivo
    inputFoto.onchange = async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        // Validações do arquivo
        if (!file.type.startsWith('image/')) {
            statusSpan.textContent = "Arquivo inválido, escolha uma imagem.";
            return;
        }
        if (file.size > 5 * 1024 * 1024) { // 5MB
            statusSpan.textContent = "Imagem muito grande (máx. 5MB).";
            return;
        }

        const reader = new FileReader();
        reader.onload = (event) => { imgPreview.src = event.target.result; };
        reader.readAsDataURL(file);

        statusSpan.textContent = "Enviando imagem...";

        if (onTrocarFoto) {
            try {
                const url = await onTrocarFoto(file);
                if (url) {
                    statusSpan.textContent = "Foto atualizada com sucesso!";
                    // Recarrega o componente para mostrar o botão de deletar
                    renderizarFotoProfissional(url, onTrocarFoto, onDeletarFoto);
                } else {
                    throw new Error("Callback de upload não retornou uma URL.");
                }
            } catch (error) {
                console.error("Falha no callback onTrocarFoto:", error);
                statusSpan.textContent = "Erro ao enviar a foto.";
                imgPreview.src = fotoUrl || 'https://placehold.co/80x80/6366f1/white?text=Foto';
            }
        }
    };

    // Adiciona o evento de clique para o botão de deletar, se ele existir
    if (btnDeletar && onDeletarFoto) {
        btnDeletar.onclick = async () => {
            if (confirm("Tem certeza que deseja remover a foto de perfil?")) {
                statusSpan.textContent = "Removendo foto...";
                const sucesso = await onDeletarFoto();
                if (sucesso) {
                    statusSpan.textContent = "Foto removida.";
                    imgPreview.src = 'https://placehold.co/80x80/6366f1/white?text=Foto';
                    // Recarrega o componente para remover o botão de deletar
                    renderizarFotoProfissional(null, onTrocarFoto, onDeletarFoto);
                } else {
                    statusSpan.textContent = "Erro ao remover a foto.";
                }
            }
        };
    }
}

/**
 * Realiza o upload de um arquivo para o Firebase Storage e atualiza o documento correspondente no Firestore.
 * @param {File} file - O arquivo de imagem a ser enviado.
 * @param {string} empresaId - O ID da empresa (para organizar o caminho no Storage).
 * @param {string} profissionalId - O ID do profissional (para organizar o caminho e localizar o documento no Firestore).
 * @returns {Promise<string|null>} - A URL de download da imagem ou null em caso de erro.
 */
export async function uploadFotoProfissional(file, empresaId, profissionalId) {
    // MULTIEMPRESA: empresaId vem do parâmetro, deve ser passado da empresa ativa
    if (!file || !empresaId || !profissionalId) {
        console.error("uploadFotoProfissional chamado com parâmetros inválidos.");
        return null;
    }

    try {
        const nomeUnico = `${Date.now()}-${file.name.replace(/\s/g, "_")}`;
        const storageRef = ref(storage, `fotos-profissionais/${empresaId}/${profissionalId}/${nomeUnico}`);

        await uploadBytes(storageRef, file);
        const url = await getDownloadURL(storageRef);

        const profDocRef = doc(db, "empresarios", empresaId, "profissionais", profissionalId);
        await updateDoc(profDocRef, { fotoUrl: url });

        console.log("Foto do profissional atualizada com sucesso no Firestore.");
        return url;

    } catch (error) {
        console.error("Erro detalhado ao enviar foto do profissional:", error);
        return null;
    }
}

/**
 * Deleta a foto de um profissional do Firebase Storage e remove a referência do Firestore.
 * @param {string} empresaId - O ID da empresa do profissional.
 * @param {string} profissionalId - O ID do profissional cuja foto será deletada.
 * @returns {Promise<boolean>} - Retorna true se a operação for bem-sucedida, false caso contrário.
 */
export async function deletarFotoProfissional(empresaId, profissionalId) {
    // MULTIEMPRESA: empresaId vem do parâmetro, deve ser passado da empresa ativa
    if (!empresaId || !profissionalId) {
        console.error("deletarFotoProfissional chamado com parâmetros inválidos.");
        return false;
    }

    const profDocRef = doc(db, "empresarios", empresaId, "profissionais", profissionalId);

    try {
        const docSnap = await getDoc(profDocRef);
        if (!docSnap.exists() || !docSnap.data().fotoUrl) {
            console.log("Profissional não encontrado ou já não possui foto.");
            return true;
        }

        const fotoUrl = docSnap.data().fotoUrl;
        const fotoRef = ref(storage, fotoUrl);

        await deleteObject(fotoRef);
        console.log("Arquivo de foto deletado do Storage com sucesso.");

        await updateDoc(profDocRef, {
            fotoUrl: null
        });
        console.log("URL da foto removida do Firestore.");

        return true;

    } catch (error) {
        if (error.code === 'storage/object-not-found') {
            console.warn("O arquivo de foto não foi encontrado no Storage, mas o Firestore será limpo.");
            await updateDoc(profDocRef, { fotoUrl: null });
            return true;
        }
        console.error("Erro ao deletar foto do profissional:", error);
        return false;
    }
}
